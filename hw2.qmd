---
title: "Homework 2"
author: "Kiran Charangat{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
editor: 
  markdown: 
    wrap: 72
---

[Link to the Github repository](https://github.com/STAT380/hw2.git)

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
## Due: Feb 9, 2024 \@ 11:59pm

Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Abalone
dataset](http://archive.ics.uci.edu/ml/datasets/Abalone) from the UCI
Machine Learning Repository. The dataset consists of physical
measurements of abalone (a type of marine snail) and includes
information on the age, sex, and size of the abalone.

We will be using the following libraries:

``` r
library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
```

```{R}
library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 30 points

EDA using `readr`, `tidyr` and `ggplot2`
:::

###### 1.1 (5 points)

Load the "Abalone" dataset as a tibble called `abalone` using the URL
provided below. The `abalone_col_names` variable contains a vector of
the column names for this dataset (to be consistent with the R naming
pattern). Make sure you read the dataset with the provided column names.

```{R}
library(readr)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"

```

```{R}
abalone_col_names <- c(
  "sex", 
  "length", 
  "diameter", 
  "height", 
  "whole_weight", 
  "shucked_weight", 
  "viscera_weight", 
  "shell_weight", 
  "rings"
)
```

```{R}
abalone <- read_csv(url, col_names = abalone_col_names)
abalone
```

------------------------------------------------------------------------

###### 1.2 (5 points)

Remove missing values and `NA`s from the dataset and store the cleaned
data in a tibble called `df`. How many rows were dropped?

```{R}
df <- abalone %>%
  # remove NA value rows
  filter(!if_any(everything(), is.na)) %>%
  # remove rows with empty spaces in any cell
  filter(!if_any(everything(), ~ .x == "" | .x == " "))

# count the number of rows dropped
rows_dropped <- nrow(abalone) - nrow(df)
print(paste("Number of rows dropped:", rows_dropped)) 
```

------------------------------------------------------------------------

##### 1.3 (5 points)

Plot histograms of all the quantitative variables in a **single plot**
[^1]

[^1]: You can use the `facet_wrap()` function for this. Have a look at
    its documentation using the help console in R

```{R}
df_long <- df %>%
  pivot_longer(
    cols = -sex, # All columns are quantitative except for 'sex'
    names_to = "variable",
    values_to = "value"
  )

# Plot data
ggplot(df_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = 'blue', color = 'black') + 
  facet_wrap(~ variable, scales = "free") + 
  # Use facet_wrap to create separate histograms for each variable
  theme_minimal() +
  labs(
    x = "Value",
    y = "Frequency",
    title = "Histograms of Quantitative Variables in the Abalone Dataset"
  )
```

------------------------------------------------------------------------

##### 1.4 (5 points)

Create a boxplot of `length` for each `sex` and create a violin-plot of
of `diameter` for each `sex`. Are there any notable differences in the
physical appearences of abalones based on your analysis here?

```{R}
# Infants, as expected, have the smallest size measurments
# Females tend to be larger in both length and diameter then males
# The distribution for the females in the violin plot is fuller and more rounded
# then the males or infants, suggesting a more consistent size range with fewere
# small or large extremes compared to males
```

```{R}
# Insert your code for boxplot here
ggplot(df, aes(x = sex, y = length, fill = sex)) +
  geom_boxplot() +
  labs(title = "Boxplot of Length for Each Sex",
       x = "Sex",
       y = "Length") +
  theme_minimal()
```

```{R}
# Insert your code for violinplot here
ggplot(df, aes(x = sex, y = diameter, fill = sex)) +
  geom_violin() +
  labs(title = "Violin Plot of Diameter for Each Sex",
       x = "Sex",
       y = "Diameter") +
  theme_minimal()
```

------------------------------------------------------------------------

###### 1.5 (5 points)

Create a scatter plot of `length` and `diameter`, and modify the shape
and color of the points based on the `sex` variable. Change the size of
each point based on the `shell_wight` value for each observation. Are
there any notable anomalies in the dataset?

```{R}
# There does appear to be some anomalies in the dataset. Since the data follows a positive correlation between length and diamter, any points that fall outside of this correlation can be considered an anamoly. For example, there is an infant abalone with an unproportunate length to diamter ratio compared to the other infants, so this data point can be considered an anamoly
```

```{R}
ggplot(df, aes(x = length, y = diameter, color = sex, shape = sex, size = shell_weight)) +
  geom_point(alpha = 0.7) +
  scale_size_continuous(range = c(1, 6)) +
  labs(title = "Scatter Plot of Length vs Diameter by Sex with Shell Weight",
       x = "Length",
       y = "Diameter",
       color = "Sex",
       shape = "Sex",
       size = "Shell Weight") +
  theme_minimal() +
  theme(legend.position = "bottom") 
```

------------------------------------------------------------------------

###### 1.6 (5 points)

For each `sex`, create separate scatter plots of `length` and
`diameter`. For each plot, also add a **linear** trendline to illustrate
the relationship between the variables. Use the `facet_wrap()` function
in R for this, and ensure that the plots are vertically stacked **not**
horizontally. You should end up with a plot that looks like this: [^2]

[^2]: Plot example for 1.6<br>
    [![](images/lines.png){style="height: 5em;"}]{.content-visible
    when-format="html"}

```{R}
ggplot(df, aes(x = length, y = diameter)) +
  geom_point(aes(color = sex), alpha = 0.5) +
  geom_smooth(method = "lm", color = "darkblue", se = FALSE) +
  facet_wrap(~ sex, scales = "free", ncol = 1) +
  labs(title = "Scatter Plots of Length vs Diameter with Linear Trendlines by Sex",
       x = "Length",
       y = "Diameter",
       color = "Sex") +
  theme_minimal() +
  theme(legend.position = "bottom")  
```

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 40 points

More advanced analyses using `dplyr`, `purrrr` and `ggplot2`
:::

------------------------------------------------------------------------

###### 2.1 (10 points)

Filter the data to only include abalone with a length of at least $0.5$
meters. Group the data by `sex` and calculate the mean of each variable
for each group. Create a bar plot to visualize the mean values for each
variable by `sex`.

```{R}
# Filter the data
filtered_data <- df %>%
  filter(length >= 0.5)

# Group by sex and calculate mean of each variable
grouped_means <- filtered_data %>%
  group_by(sex) %>%
  summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>%
  ungroup()

long_data <- grouped_means %>%
  pivot_longer(cols = -sex, names_to = "variable", values_to = "mean_value")

# create the bar plot
ggplot(long_data, aes(x = sex, y = mean_value, fill = variable)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Mean Values of Variables by Sex for Abalone >= 0.5 meters",
       x = "Sex",
       y = "Mean Value") +
  theme_minimal() +
  facet_wrap(~ variable, scales = "free_y")
```

------------------------------------------------------------------------

###### 2.2 (15 points)

Implement the following in a **single command**:

1.  Temporarily create a new variable called `num_rings` which takes a
    value of:

-   `"low"` if `rings < 10`
-   `"high"` if `rings > 20`, and
-   `"med"` otherwise

2.  Group `df` by this new variable and `sex` and compute `avg_weight`
    as the average of the
    `whole_weight + shucked_weight + viscera_weight + shell_weight` for
    each combination of `num_rings` and `sex`.

3.  Use the `geom_tile()` function to create a tile plot of `num_rings`
    vs `sex` with the color indicating of each tile indicating the
    `avg_weight` value.

```{R}
df %>%
  mutate(num_rings = case_when(
    rings < 10 ~ "low",
    rings > 20 ~ "high",
    TRUE ~ "med"
  )) %>%
  group_by(num_rings, sex) %>%
  summarize(avg_weight = mean(whole_weight + shucked_weight + viscera_weight + shell_weight, na.rm = TRUE)) %>%
  ungroup() %>%
  ggplot(aes(x = sex, y = num_rings, fill = avg_weight)) +
    geom_tile() +
    labs(title = "Tile Plot of Num Rings vs Sex",
         x = "Sex",
         y = "Number of Rings",
         fill = "Average Weight") +
    theme_minimal()

```

------------------------------------------------------------------------

###### 2.3 (5 points)

Make a table of the pairwise correlations between all the numeric
variables rounded to 2 decimal points. Your final answer should look
like this [^3]

[^3]: Table for 2.3<br>

```{R}
library(knitr)

numeric_data <- df %>% select_if(is.numeric)

correlation_matrix <- cor(numeric_data, use = "complete.obs")

rounded_correlation_matrix <- round(correlation_matrix, 2)

knitr::kable(rounded_correlation_matrix, caption = "Pairwise Correlations Between Numeric Variables")

```

------------------------------------------------------------------------

###### 2.4 (10 points)

Use the `map2()` function from the `purrr` package to create a scatter
plot for each *quantitative* variable against the number of `rings`
variable. Color the points based on the `sex` of each abalone. You can
use the `cowplot::plot_grid()` function to finally make the following
grid of plots.

::: {.content-visible when-format="html"}
![](images/plot_grid.png)
:::

```{R}

# Select the quantitative variables
quantitative_vars <- names(df %>% select_if(is.numeric))

# Use map2 to create a list of ggplot objects
plots <- map2(quantitative_vars, "rings", ~ ggplot(df, aes_string(x = .y, y = .x, color = "sex")) +
  geom_point() +
  labs(x = "Rings", y = .x) +
  theme_minimal()
  )

# Combine the plots into a single grid using plot_grid()
plot_grid(plotlist = plots, ncol = 3)


```

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 30 points

Linear regression using `lm`
:::

------------------------------------------------------------------------

###### 3.1 (10 points)

Perform a simple linear regression with `diameter` as the covariate and
`height` as the response. Interpret the model coefficients and their
significance values.

```{R}
model <- lm(height ~ diameter, data = df)
summary(model)
```

```{R}
# The p-value for the intercept is  0.0119, which is less than 0.05, which means
# that the intercept is statistically significant at the 5% significance level.
# The p-value for the diameter coefficient is less than 2e-16, which is far below
# the common significance threshold of 0.05 which means that diameter is a
# statistically significant predictor of height.
# The multiple R-sqaured value of 0.695 indicates that approximately 69.5% of the variance in height is explained by diameter, which is a strong relationship in a simple linear regression.
```

------------------------------------------------------------------------

###### 3.2 (10 points)

Make a scatterplot of `height` vs `diameter` and plot the regression
line in `color="red"`. You can use the base `plot()` function in R for
this. Is the linear model an appropriate fit for this relationship?
Explain.

```{R}
plot(df$diameter, df$height, xlab = "Diameter", ylab = "Height", main = "Height vs Diameter")
model <- lm(height ~ diameter, data = df)
abline(model, col = "red")
```

```{R}
# The relationship between height and diameter does seem to be linear , as the data points  trend in a straight line with the exception of a few outliers. Therefore, a linear model would be an appropiate fit for this relationship.
```

------------------------------------------------------------------------

###### 3.3 (10 points)

Suppose we have collected observations for "new" abalones with
`new_diameter` values given below. What is the expected value of their
`height` based on your model above? Plot these new observations along
with your predictions in your plot from earlier using `color="violet"`

```{R}
new_diameters <- c(
  0.15218946,
  0.48361548,
  0.58095513,
  0.07603687,
  0.50234599,
  0.83462092,
  0.95681938,
  0.92906875,
  0.94245437,
  0.01209518
)

# Predict the expected heights for the new diameters
new_heights <- predict(model, newdata = data.frame(diameter = new_diameters))

# Original scatterplot
plot(df$diameter, df$height, xlab = "Diameter", ylab = "Height", main = "Height vs Diameter")

# Add  regression line
abline(model, col = "red")

# Add the new observations with predicted heights in violet
points(new_diameters, new_heights, col = "violet", pch = 19)
```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

# Appendix

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::

::: {.content-visible when-format="html"}
| length         | diameter | height | whole_weight | shucked_weight | viscera_weight | shell_weight | rings |      |
|:---------------|---------:|-------:|-------------:|---------------:|---------------:|-------------:|------:|-----:|
| length         |     1.00 |   0.99 |         0.83 |           0.93 |           0.90 |         0.90 |  0.90 | 0.56 |
| diameter       |     0.99 |   1.00 |         0.83 |           0.93 |           0.89 |         0.90 |  0.91 | 0.57 |
| height         |     0.83 |   0.83 |         1.00 |           0.82 |           0.77 |         0.80 |  0.82 | 0.56 |
| whole_weight   |     0.93 |   0.93 |         0.82 |           1.00 |           0.97 |         0.97 |  0.96 | 0.54 |
| shucked_weight |     0.90 |   0.89 |         0.77 |           0.97 |           1.00 |         0.93 |  0.88 | 0.42 |
| viscera_weight |     0.90 |   0.90 |         0.80 |           0.97 |           0.93 |         1.00 |  0.91 | 0.50 |
| shell_weight   |     0.90 |   0.91 |         0.82 |           0.96 |           0.88 |         0.91 |  1.00 | 0.63 |
| rings          |     0.56 |   0.57 |         0.56 |           0.54 |           0.42 |         0.50 |  0.63 | 1.00 |
:::
